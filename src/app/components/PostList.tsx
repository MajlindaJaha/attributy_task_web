// components/PostTable.tsx
import React, { useEffect, useState } from "react";

import {
  Box,
  Button,
  IconButton,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  TableContainer,
  Select,
  useDisclosure,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalFooter,
  ModalBody,
  ModalCloseButton,
  Text,
  Flex,
  Input, // Ensure Input is still imported for other uses in the Modal
} from "@chakra-ui/react";
import { FaEdit, FaTrash } from "react-icons/fa";
import { usePostStore } from "../lib/store";

const PostTable = () => {
  const {
    posts,
    page,
    limit,
    count,
    fetchPosts,
    addPost,
    updatePost,
    deletePost,
    setPage,
    setLimit,
  } = usePostStore();
  const [editingPost, setEditingPost] = useState<any | null>(null);
  const [title, setTitle] = useState("");
  const [content, setContent] = useState("");
  const { isOpen, onOpen, onClose } = useDisclosure();

  useEffect(() => {
    fetchPosts(page, limit);
  }, [fetchPosts, page, limit]);

  const handleEdit = (post: any) => {
    setEditingPost(post);
    setTitle(post.title);
    setContent(post.content);
    onOpen();
  };

  const handleSave = async () => {
    if (editingPost) {
      await updatePost(editingPost.postId, { ...editingPost, title, content });
    } else {
      await addPost({ title, content }); // ID will be generated by backend
    }
    onClose();
    setTitle("");
    setContent("");
  };

  const handleDelete = async (id: number) => {
    await deletePost(id);
  };

  const handleChangePage = (newPage: number) => {
    if (newPage >= 1) {
      setPage(newPage);
    }
  };

  const handleChangeRowsPerPage = (
    event: React.ChangeEvent<HTMLSelectElement>
  ) => {
    const newLimit = parseInt(event.target.value, 10);
    setLimit(newLimit);
    setPage(1); // Reset page to 1 when changing rows per page
  };

  return (
    <Box m={20}>
      <Button
        onClick={() => {
          setEditingPost(null);
          onOpen();
        }}
        mb={4}
      >
        Add Post
      </Button>
      <TableContainer>
        <Table variant="striped" colorScheme="gray">
          <Thead>
            <Tr>
              <Th>Title</Th>
              <Th>Content</Th>
              <Th>Actions</Th>
            </Tr>
          </Thead>
          <Tbody>
            {posts.map((post) => (
              <Tr key={post.id}>
                <Td>{post.title}</Td>
                <Td>{post.content}</Td>
                <Td>
                  <IconButton
                    aria-label="Edit Post"
                    icon={<FaEdit />}
                    onClick={() => handleEdit(post)}
                    mr={2}
                  />
                  <IconButton
                    aria-label="Delete Post"
                    icon={<FaTrash />}
                    onClick={() => handleDelete(post.postId)}
                  />
                </Td>
              </Tr>
            ))}
          </Tbody>
        </Table>
      </TableContainer>
      <Flex justifyContent="space-between" alignItems="center" mt={4}>
        <Button
          onClick={() => handleChangePage(page - 1)}
          isDisabled={page === 1}
        >
          Previous
        </Button>
        <Text>
          Page {page} of {Math.ceil(count / limit)}
        </Text>
        <Button
          onClick={() => handleChangePage(page + 1)}
          isDisabled={page >= Math.ceil(count / limit)}
        >
          Next
        </Button>
      </Flex>
      <Flex alignItems="center" mt={4}>
        <Text mr={2}>Rows per page:</Text>
        <Select value={limit} onChange={handleChangeRowsPerPage} width="80px">
          <option value={5}>5</option>
          <option value={10}>10</option>
          <option value={20}>20</option>
        </Select>
      </Flex>

      <Modal isOpen={isOpen} onClose={onClose}>
        <ModalOverlay />
        <ModalContent>
          <ModalHeader>{editingPost ? "Edit Post" : "Add Post"}</ModalHeader>
          <ModalCloseButton />
          <ModalBody>
            <Input
              placeholder="Title"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              mb={4}
            />
            <Input
              placeholder="Content"
              value={content}
              onChange={(e) => setContent(e.target.value)}
            />
          </ModalBody>
          <ModalFooter>
            <Button colorScheme="blue" mr={3} onClick={handleSave}>
              Save
            </Button>
            <Button variant="ghost" onClick={onClose}>
              Cancel
            </Button>
          </ModalFooter>
        </ModalContent>
      </Modal>
    </Box>
  );
};

export default PostTable;
